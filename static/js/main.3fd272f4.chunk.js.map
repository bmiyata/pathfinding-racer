{"version":3,"sources":["sprite.svg","redux/grid/grid.types.js","redux/grid/grid.actions.js","redux/grid/grid.util.js","redux/algorithm1/algorithm1.types.js","redux/algorithm1/algorithm1.actions.js","redux/algorithm2/algorithm2.types.js","components/Header.jsx","redux/algorithm2/algorithm2.actions.js","components/Steps/SelectAlgorithm1.jsx","components/Steps/SelectAlgorithm2.jsx","components/Steps/Step1.jsx","components/Steps/Step2.jsx","components/Steps/Step3.jsx","algorithms/dijkstra.js","algorithms/aStar.js","algorithms/breadthFirstSearch.js","algorithms/depthFirstSearch.js","algorithms/greedy.js","components/Steps/Step4.jsx","components/Steps/Steps.jsx","components/Stats/Stats1.jsx","components/Stats/Stats2.jsx","components/Stats/Stats.jsx","components/Grids/Node.jsx","components/Grids/Grid1.jsx","components/Grids/Grid2.jsx","components/Grids/Grids.jsx","components/PathfindingVisualizer.jsx","App.js","redux/grid/grid.reducer.js","components/stopwatch.js","redux/algorithm1/algorithm1.reducer.js","redux/algorithm2/algorithm2.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["module","exports","GridActionTypes","SET_GRID","INITIALIZE_GRID","ADD_WALL","RESET_GRID","RESET_DISTANCES_AND_ISVISITED","SET_START_NODE","SET_FINISH_NODE","SETTING_START_NODE","SETTING_FINISH_NODE","DONE_SETTING_START_NODE","DONE_SETTING_FINISH_NODE","SETTING_WALLS","DONE_SETTING_WALLS","doneSettingStartNode","type","doneSettingFinishNode","doneSettingWalls","addWall","grid","row","col","newGrid","slice","node","newNode","isWall","createEmptyGrid","initialGrid","i","j","push","distance","Infinity","isVisited","previousNode","f","g","h","resetDistancesAndIsVisited","length","resetGridClasses","document","getElementById","className","includes","classList","remove","Algorithm1ActionTypes","TOGGLE_DROPDOWN1","SET_ALGORITHM1","UPDATE_FORMATTED_TIME1","RESET_TIMER1","INCREMENT_STEPS1","RESET_STEPS1","resetTimer1","Algorithm2ActionTypes","TOGGLE_DROPDOWN2","SET_ALGORITHM2","UPDATE_FORMATTED_TIME2","RESET_TIMER2","INCREMENT_STEPS2","RESET_STEPS2","connect","dispatch","resetGrid","resetTimer2","resetSteps1","resetSteps2","href","sprite","onClick","console","log","state","dropdown","algorithm1","algorithm","toggleDropdown","setAlgorithm","payload","algorithm2","Step1","Step2","Step3","dijkstra","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","closestNode","shift","resetGridProperties","getNodesInShortestPathOrder","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","currentNode","unshift","aStar","openList","closedList","lowestFIndex","curr","splice","getNeighbors","gScore","gScoreIsBest","heuristic","node1","node2","Math","abs","breadthFirstSearch","queue","depthFirstSearch","stack","greedy","lowestIndex","updateFormattedTime1","time","updateFormattedTime2","incrementSteps1","incrementSteps2","stopwatch1","stopwatch","stopwatch2","animateAlgorithm","gridNum","setTimeout","animateShortestPath","isOn","update","delta","formattedTime","timeFormatter","nodesInShortestPathOrderGrid1","visitedNodesInOrderGrid1","newGrid1","nodesInShortestPathOrderGrid2","visitedNodesInOrderGrid2","steps","reset","interval","setInterval","bind","offset","Date","now","startNodeCoords","finishNodeCoords","alert","Steps","useState","showTimeCup","setTimeCup","showStepCup","setStepCup","useEffect","Stats","settingStartNode","setStartNode","settingFinishNode","setFinishNode","settingWalls","id","isStartNode","isFinishNode","renderStartIcon","setRenderStartIcon","renderFinishIcon","setRenderFinishIcon","onMouseUp","isSettingStartNode","isSettingFinishNode","onMouseDown","e","preventDefault","onMouseEnter","isSettingWalls","onMouseLeave","gridContent","map","rowIndex","colIndex","key","PathfindingVisualizer","App","INITIAL_STATE","GridReducer","action","Stopwatch","this","clearInterval","timePassed","seconds","getSeconds","toString","milliseconds","getMilliseconds","winTime","winSteps","algorithm1Reducer","algorithm2Reducer","rootReducer","combineReducers","gridReducer","store","createStore","applyMiddleware","ReactDOM","render"],"mappings":"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","file":"static/js/main.3fd272f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sprite.3922528f.svg\";","const GridActionTypes = {\r\n  SET_GRID: \"SET_GRID\",\r\n  INITIALIZE_GRID: \"INITIALIZE_GRID\",\r\n  ADD_WALL: \"ADD_WALL\",\r\n  RESET_GRID: \"RESET_GRID\",\r\n  RESET_DISTANCES_AND_ISVISITED: \"RESET_DISTANCES_AND_ISVISITED\",\r\n  SET_START_NODE: \"SET_START_NODE\",\r\n  SET_FINISH_NODE: \"SET_FINISH_NODE\",\r\n  SETTING_START_NODE: \"SETTING_START_NODE\",\r\n  SETTING_FINISH_NODE: \"SETTING_FINISH_NODE\",\r\n  DONE_SETTING_START_NODE: \"DONE_SETTING_START_NODE\",\r\n  DONE_SETTING_FINISH_NODE: \"DONE_SETTING_FINISH_NODE\",\r\n  SETTING_WALLS: \"SETTING_WALLS\",\r\n  DONE_SETTING_WALLS: \"DONE_SETTING_WALLS\"\r\n};\r\n\r\nexport default GridActionTypes;\r\n","import GridActionTypes from \"./grid.types\";\r\n\r\nexport const settingStartNode = () => ({\r\n  type: GridActionTypes.SETTING_START_NODE\r\n});\r\n\r\nexport const doneSettingStartNode = () => ({\r\n  type: GridActionTypes.DONE_SETTING_START_NODE\r\n});\r\n\r\nexport const setStartNode = (row, col) => ({\r\n  type: GridActionTypes.SET_START_NODE,\r\n  payload: [row, col]\r\n});\r\n\r\nexport const settingFinishNode = () => ({\r\n  type: GridActionTypes.SETTING_FINISH_NODE\r\n});\r\n\r\nexport const doneSettingFinishNode = () => ({\r\n  type: GridActionTypes.DONE_SETTING_FINISH_NODE\r\n});\r\n\r\nexport const setFinishNode = (row, col) => ({\r\n  type: GridActionTypes.SET_FINISH_NODE,\r\n  payload: [row, col]\r\n});\r\n\r\nexport const addWall = (row, col) => ({\r\n  type: GridActionTypes.ADD_WALL,\r\n  payload: [row, col]\r\n});\r\n\r\nexport const settingWalls = () => ({\r\n  type: GridActionTypes.SETTING_WALLS\r\n});\r\n\r\nexport const doneSettingWalls = () => ({\r\n  type: GridActionTypes.DONE_SETTING_WALLS\r\n});\r\n\r\nexport const resetGrid = () => ({\r\n  type: GridActionTypes.RESET_GRID\r\n});\r\n\r\nexport const resetDistancesAndIsVisited = () => ({\r\n  type: GridActionTypes.RESET_DISTANCES_AND_ISVISITED\r\n});\r\n","export const addWall = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall\r\n  };\r\n\r\n  newGrid[row][col] = newNode;\r\n\r\n  return newGrid;\r\n};\r\n\r\n// g: total cost of get to a particular node\r\n// h: Estimated time to reach finish node\r\n// f: g + h\r\n\r\nexport const createEmptyGrid = () => {\r\n  const initialGrid = [];\r\n  for (let i = 0; i < 15; i++) {\r\n    const row = [];\r\n    for (let j = 0; j < 20; j++) {\r\n      row.push({\r\n        row: i,\r\n        col: j,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        f: 0,\r\n        g: 0,\r\n        h: 0\r\n      });\r\n    }\r\n\r\n    initialGrid.push(row);\r\n  }\r\n  return initialGrid;\r\n};\r\n\r\nexport const resetDistancesAndIsVisited = grid => {\r\n  const newGrid = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    const row = [];\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      // Return the same node but with the distance and isvisited reset\r\n      row.push({\r\n        ...grid[i][j],\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        previousNode: null,\r\n        f: 0,\r\n        g: 0,\r\n        h: 0\r\n      });\r\n    }\r\n    newGrid.push(row);\r\n  }\r\n\r\n  return newGrid;\r\n};\r\n\r\nexport const resetGridClasses = () => {\r\n  for (let i = 0; i < 15; i++) {\r\n    for (let j = 0; j < 20; j++) {\r\n      // document\r\n      //   .getElementById(`node-${i}-${j}-grid1`)\r\n      //   .className.includes(\"node-visited\");\r\n      if (\r\n        document\r\n          .getElementById(`node-${i}-${j}-grid1`)\r\n          .className.includes(\"node-visited\")\r\n      ) {\r\n        document\r\n          .getElementById(`node-${i}-${j}-grid1`)\r\n          .classList.remove(\"node-visited\");\r\n      }\r\n      if (\r\n        document\r\n          .getElementById(`node-${i}-${j}-grid2`)\r\n          .className.includes(\"node-visited\")\r\n      ) {\r\n        document\r\n          .getElementById(`node-${i}-${j}-grid2`)\r\n          .classList.remove(\"node-visited\");\r\n      }\r\n\r\n      if (\r\n        document\r\n          .getElementById(`node-${i}-${j}-grid1`)\r\n          .className.includes(\"node-shortest-path\")\r\n      ) {\r\n        document\r\n          .getElementById(`node-${i}-${j}-grid1`)\r\n          .classList.remove(\"node-shortest-path\");\r\n      }\r\n      if (\r\n        document\r\n          .getElementById(`node-${i}-${j}-grid2`)\r\n          .className.includes(\"node-shortest-path\")\r\n      ) {\r\n        document\r\n          .getElementById(`node-${i}-${j}-grid2`)\r\n          .classList.remove(\"node-shortest-path\");\r\n      }\r\n      // document.getElementById(`node-${i}-${j}-grid2`).className -=\r\n      //   \"node-visited\";\r\n    }\r\n  }\r\n};\r\n","const Algorithm1ActionTypes = {\r\n  TOGGLE_DROPDOWN1: \"TOGGLE_DROPDOWN1\",\r\n  SET_ALGORITHM1: \"SET_ALGORITHM1\",\r\n  UPDATE_FORMATTED_TIME1: \"UPDATE_FORMATTED_TIME1\",\r\n  RESET_TIMER1: \"RESET_TIMER1\",\r\n  INCREMENT_STEPS1: \"INCREMENT_STEPS1\",\r\n  RESET_STEPS1: \"RESET_STEPS1\"\r\n};\r\n\r\nexport default Algorithm1ActionTypes;\r\n","import Algorithm1ActionTypes from \"./algorithm1.types\";\r\n\r\nexport const toggleDropdown = () => ({\r\n  type: Algorithm1ActionTypes.TOGGLE_DROPDOWN1\r\n});\r\n\r\nexport const setAlgorithm = algorithm => ({\r\n  type: Algorithm1ActionTypes.SET_ALGORITHM1,\r\n  payload: algorithm\r\n});\r\n\r\nexport const updateFormattedTime1 = time => ({\r\n  type: Algorithm1ActionTypes.UPDATE_FORMATTED_TIME1,\r\n  payload: time\r\n});\r\n\r\nexport const resetTimer1 = () => ({\r\n  type: Algorithm1ActionTypes.RESET_TIMER1\r\n});\r\n\r\nexport const incrementSteps1 = () => ({\r\n  type: Algorithm1ActionTypes.INCREMENT_STEPS1\r\n});\r\n\r\nexport const resetSteps1 = () => ({\r\n  type: Algorithm1ActionTypes.RESET_STEPS1\r\n});\r\n","const Algorithm2ActionTypes = {\r\n  TOGGLE_DROPDOWN2: \"TOGGLE_DROPDOWN2\",\r\n  SET_ALGORITHM2: \"SET_ALGORITHM2\",\r\n  UPDATE_FORMATTED_TIME2: \"UPDATE_FORMATTED_TIME2\",\r\n  RESET_TIMER2: \"RESET_TIMER2\",\r\n  INCREMENT_STEPS2: \"INCREMENT_STEPS2\",\r\n  RESET_STEPS2: \"RESET_STEPS2\"\r\n};\r\n\r\nexport default Algorithm2ActionTypes;\r\n","import React from \"react\";\r\nimport sprite from \"../sprite.svg\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { resetGrid } from \"../redux/grid/grid.actions\";\r\nimport { resetGridClasses } from \"../redux/grid/grid.util\";\r\nimport {\r\n  resetTimer1,\r\n  resetSteps1\r\n} from \"../redux/algorithm1/algorithm1.actions\";\r\nimport {\r\n  resetTimer2,\r\n  resetSteps2\r\n} from \"../redux/algorithm2/algorithm2.actions\";\r\n\r\nconst Header = ({\r\n  resetGrid,\r\n  resetTimer1,\r\n  resetTimer2,\r\n  resetSteps1,\r\n  resetSteps2\r\n}) => {\r\n  const handleOnClick = () => {\r\n    // This function resets the classes for the grids, resets the timers, resets the steps\r\n\r\n    console.log(\"inside onClick to reset grid\");\r\n    resetTimer1();\r\n    resetSteps1();\r\n    resetTimer2();\r\n    resetSteps2();\r\n    resetGridClasses();\r\n    resetGrid();\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header__title\">\r\n        <svg className=\"logo\">\r\n          <use href={sprite + \"#path\"}></use>\r\n        </svg>\r\n        <h1 className=\"heading-primary\">Pathfinding Racer</h1>\r\n      </div>\r\n      <div onClick={handleOnClick} className=\"heading-secondary btn btn--reset\">\r\n        Reset Board\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  resetGrid: () => dispatch(resetGrid()),\r\n  resetTimer1: () => dispatch(resetTimer1()),\r\n  resetTimer2: () => dispatch(resetTimer2()),\r\n  resetSteps1: () => dispatch(resetSteps1()),\r\n  resetSteps2: () => dispatch(resetSteps2())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Header);\r\n","import Algorithm2ActionTypes from \"./algorithm2.types\";\r\n\r\nexport const toggleDropdown = () => ({\r\n  type: Algorithm2ActionTypes.TOGGLE_DROPDOWN2\r\n});\r\n\r\nexport const setAlgorithm = algorithm => ({\r\n  type: Algorithm2ActionTypes.SET_ALGORITHM2,\r\n  payload: algorithm\r\n});\r\n\r\nexport const updateFormattedTime2 = time => ({\r\n  type: Algorithm2ActionTypes.UPDATE_FORMATTED_TIME2,\r\n  payload: time\r\n});\r\n\r\nexport const resetTimer2 = () => ({\r\n  type: Algorithm2ActionTypes.RESET_TIMER2\r\n});\r\n\r\nexport const incrementSteps2 = () => ({\r\n  type: Algorithm2ActionTypes.INCREMENT_STEPS2\r\n});\r\n\r\nexport const resetSteps2 = () => ({\r\n  type: Algorithm2ActionTypes.RESET_STEPS2\r\n});\r\n","import React, { Fragment } from \"react\";\r\nimport sprite from \"../../sprite.svg\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  toggleDropdown,\r\n  setAlgorithm\r\n} from \"../../redux/algorithm1/algorithm1.actions\";\r\n\r\nconst SelectAlgorithm1 = ({\r\n  algorithm,\r\n  dropdown,\r\n  toggleDropdown,\r\n  setAlgorithm\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"flex mt\">\r\n        <svg className=\"logo--one\">\r\n          <use href={sprite + \"#one\"}></use>\r\n        </svg>\r\n        <div\r\n          onClick={() => toggleDropdown()}\r\n          className=\"dropdown btn btn--choose\"\r\n        >\r\n          <span>{algorithm === \"\" ? \"Select Algorithm\" : algorithm}</span>\r\n          <span>\r\n            <svg className=\"logo--down\">\r\n              <use href={sprite + \"#down-arrow\"}></use>\r\n            </svg>\r\n          </span>\r\n          {dropdown && (\r\n            <Fragment>\r\n              <div className=\"dropdown__algorithms\">\r\n                <div\r\n                  onClick={() => setAlgorithm(\"Dijkstra's Algorithm\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  Dijkstra's Algorithm\r\n                </div>\r\n                <div\r\n                  onClick={() => setAlgorithm(\"A*\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  A*\r\n                </div>\r\n                <div\r\n                  onClick={() => setAlgorithm(\"Breadth-First-Search\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  Breadth-First-Search\r\n                </div>\r\n                <div\r\n                  onClick={() => setAlgorithm(\"Depth-First-Search\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  Depth-First-Search\r\n                </div>\r\n                <div\r\n                  onClick={() => setAlgorithm(\"Best-First-Search\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  Best-First-Search\r\n                </div>\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleDropdown: () => dispatch(toggleDropdown()),\r\n  setAlgorithm: algorithm => dispatch(setAlgorithm(algorithm))\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  dropdown: state.algorithm1.dropdown,\r\n  algorithm: state.algorithm1.algorithm\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAlgorithm1);\r\n","import React, { Fragment } from \"react\";\r\nimport sprite from \"../../sprite.svg\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  toggleDropdown,\r\n  setAlgorithm\r\n} from \"../../redux/algorithm2/algorithm2.actions\";\r\n\r\nconst SelectAlgorithm2 = ({\r\n  algorithm,\r\n  dropdown,\r\n  toggleDropdown,\r\n  setAlgorithm\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"flex mt\">\r\n        <svg className=\"logo--two\">\r\n          <use href={sprite + \"#two\"}></use>\r\n        </svg>\r\n        <div\r\n          onClick={() => toggleDropdown()}\r\n          className=\"dropdown btn btn--choose\"\r\n        >\r\n          <span>{algorithm === \"\" ? \"Select Algorithm\" : algorithm}</span>\r\n          <span>\r\n            <svg className=\"logo--down\">\r\n              <use href={sprite + \"#down-arrow\"}></use>\r\n            </svg>\r\n          </span>\r\n          {dropdown && (\r\n            <Fragment>\r\n              <div className=\"dropdown__algorithms\">\r\n                <div\r\n                  onClick={() => setAlgorithm(\"Dijkstra's Algorithm\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  Dijkstra's Algorithm\r\n                </div>\r\n                <div\r\n                  onClick={() => setAlgorithm(\"A*\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  A*\r\n                </div>\r\n                <div\r\n                  onClick={() => setAlgorithm(\"Breadth-First-Search\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  Breadth-First-Search\r\n                </div>\r\n                <div\r\n                  onClick={() => setAlgorithm(\"Depth-First-Search\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  Depth-First-Search\r\n                </div>\r\n                <div\r\n                  onClick={() => setAlgorithm(\"Best-First-Search\")}\r\n                  className=\"dropdown__algorithm\"\r\n                >\r\n                  Best-First-Search\r\n                </div>\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleDropdown: () => dispatch(toggleDropdown()),\r\n  setAlgorithm: algorithm => dispatch(setAlgorithm(algorithm))\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  dropdown: state.algorithm2.dropdown,\r\n  algorithm: state.algorithm2.algorithm\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAlgorithm2);\r\n","import React from \"react\";\r\n\r\nimport SelectAlgorithm1 from \"./SelectAlgorithm1\";\r\nimport SelectAlgorithm2 from \"./SelectAlgorithm2\";\r\n\r\nconst Step1 = () => {\r\n  return (\r\n    <div className=\"steps__step--1\">\r\n      <h3 className=\"heading-secondary\">STEP 1: Choose Two Algorithms</h3>\r\n      <SelectAlgorithm1 />\r\n      <SelectAlgorithm2 />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Step1;\r\n","import React from \"react\";\r\nimport sprite from \"../../sprite.svg\";\r\n\r\nconst Step2 = () => {\r\n  return (\r\n    <div className=\"steps__step--2\">\r\n      <h3 className=\"heading-secondary\">\r\n        STEP 2: Move the Start and Finish in the Grid\r\n      </h3>\r\n      <div className=\"logo--start-finish\">\r\n        <svg className=\"logo--start\">\r\n          <use href={sprite + \"#start\"}></use>\r\n        </svg>\r\n        <svg className=\"logo--finish\">\r\n          <use href={sprite + \"#finish-line\"}></use>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Step2;\r\n","import React from \"react\";\r\n\r\nconst Step3 = () => {\r\n  return (\r\n    <div className=\"steps__step--3\">\r\n      <h3 className=\"heading-secondary\">STEP 3: Add Walls</h3>\r\n      <p className=\"p\">\r\n        Add walls by left clicking. Walls cannot be passed through.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Step3;\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nodesInShortestPathOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) {\r\n      grid = resetGridProperties(grid);\r\n      return [[], visitedNodesInOrder, grid];\r\n    }\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (\r\n      closestNode.row === finishNode.row &&\r\n      closestNode.col === finishNode.col\r\n    ) {\r\n      nodesInShortestPathOrder.push(...getNodesInShortestPathOrder(finishNode));\r\n      grid = resetGridProperties(grid);\r\n\r\n      return [nodesInShortestPathOrder, visitedNodesInOrder, grid];\r\n    }\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nexport const resetGridProperties = grid => {\r\n  const newGrid = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    const row = [];\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      // Return the same node but with the distance and isvisited reset\r\n      row.push({\r\n        ...grid[i][j],\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        previousNode: null,\r\n        f: 0,\r\n        g: 0,\r\n        h: 0\r\n      });\r\n    }\r\n    newGrid.push(row);\r\n  }\r\n\r\n  return newGrid;\r\n};\r\n","import { resetGridProperties } from \"./dijkstra\";\r\n\r\n// Idea behind astar f = g + h\r\n// g = cost of getting to a specific node\r\n// h = heuristic cost\r\n// Explore node with lowest f\r\n\r\nexport const aStar = (grid, startNode, finishNode) => {\r\n  const openList = [];\r\n  const closedList = [];\r\n  const visitedNodesInOrder = [];\r\n  openList.push(startNode);\r\n  visitedNodesInOrder.push(startNode);\r\n  const nodesInShortestPathOrder = [];\r\n\r\n  while (openList.length) {\r\n    let lowestFIndex = 0;\r\n\r\n    // Get node with lowest f\r\n    for (let i = 0; i < openList.length; i++) {\r\n      if (openList[i].f < openList[lowestFIndex].f) {\r\n        lowestFIndex = i;\r\n      }\r\n    }\r\n\r\n    let currentNode = openList[lowestFIndex];\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    // Check if found the finish\r\n    if (\r\n      currentNode.row === finishNode.row &&\r\n      currentNode.col === finishNode.col\r\n    ) {\r\n      let curr = currentNode;\r\n      closedList.push(curr);\r\n\r\n      while (curr) {\r\n        nodesInShortestPathOrder.unshift(curr);\r\n        curr = curr.previousNode;\r\n      }\r\n\r\n      grid = resetGridProperties(grid);\r\n\r\n      return [nodesInShortestPathOrder, closedList, grid];\r\n    }\r\n\r\n    // If did not find finish, move currentNode from open arr to closed, get neighbors\r\n    for (let i = 0; i < openList.length; i++) {\r\n      if (\r\n        openList[i].row === currentNode.row &&\r\n        openList[i].col === currentNode.col\r\n      ) {\r\n        closedList.push(...openList.splice(i, 1));\r\n      }\r\n    }\r\n\r\n    const neighbors = getNeighbors(grid, currentNode);\r\n\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      const neighbor = neighbors[i];\r\n\r\n      // If it is in the closed list of if the node is a wall continue\r\n      if (closedList.includes(neighbor) || neighbor.isWall) continue;\r\n\r\n      const gScore = currentNode.g + 1;\r\n      let gScoreIsBest = false;\r\n\r\n      // Check if this is the first time we arrived at this particular node\r\n      // If yes, then it must be best\r\n      if (!openList.includes(neighbor)) {\r\n        gScoreIsBest = true;\r\n        neighbor.h = heuristic(neighbor, finishNode);\r\n        openList.push(neighbor);\r\n      } else if (gScore < neighbor.g) {\r\n        // This is when we've already visited this node but the path to this node is shorter\r\n        gScoreIsBest = true;\r\n      }\r\n\r\n      if (gScoreIsBest) {\r\n        // If this is the best path so far, save information on how we got to this node.\r\n        neighbor.previousNode = currentNode;\r\n        neighbor.g = gScore;\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n      }\r\n    }\r\n  }\r\n\r\n  // No result found\r\n  grid = resetGridProperties(grid);\r\n  return [nodesInShortestPathOrder, closedList, grid];\r\n};\r\n\r\nexport const getNeighbors = (grid, currentNode) => {\r\n  const neighbors = [];\r\n  const row = currentNode.row;\r\n  const col = currentNode.col;\r\n\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  return neighbors;\r\n};\r\n\r\n// Manhattan distance heuristic\r\nexport const heuristic = (node1, node2) => {\r\n  const d1 = Math.abs(node1.row - node2.row);\r\n  const d2 = Math.abs(node1.col - node2.col);\r\n  return d1 + d2;\r\n};\r\n","import { getNodesInShortestPathOrder, resetGridProperties } from \"./dijkstra\";\r\nimport { getNeighbors } from \"./aStar\";\r\n\r\n// Idea behind Breadth First Search is to search all neighbors\r\n// of the current node before going deeper into the graph\r\n\r\nexport const breadthFirstSearch = (grid, startNode, finishNode) => {\r\n  const visitedNodesInOrder = [];\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  const nodesInShortestPathOrder = [];\r\n\r\n  while (queue.length) {\r\n    const currentNode = queue.shift();\r\n\r\n    if (currentNode.isWall || visitedNodesInOrder.includes(currentNode)) {\r\n      continue;\r\n    }\r\n\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    if (\r\n      currentNode.row === finishNode.row &&\r\n      currentNode.col === finishNode.col\r\n    ) {\r\n      // Found finish\r\n      grid = resetGridProperties(grid);\r\n      nodesInShortestPathOrder.push(...getNodesInShortestPathOrder(finishNode));\r\n      return [nodesInShortestPathOrder, visitedNodesInOrder, grid];\r\n    }\r\n\r\n    // Add neighbors to the queue\r\n    const neighbors = getNeighbors(grid, currentNode);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      if (!visitedNodesInOrder.includes(neighbors[i])) {\r\n        neighbors[i].previousNode = currentNode;\r\n        queue.push(neighbors[i]);\r\n      }\r\n    }\r\n  }\r\n  grid = resetGridProperties(grid);\r\n\r\n  return [nodesInShortestPathOrder, visitedNodesInOrder, grid];\r\n};\r\n","import { getNeighbors } from \"./aStar\";\r\nimport { getNodesInShortestPathOrder, resetGridProperties } from \"./dijkstra\";\r\n\r\nexport const depthFirstSearch = (grid, startNode, finishNode) => {\r\n  const stack = [];\r\n  stack.push(startNode);\r\n  const visitedNodesInOrder = [];\r\n  const nodesInShortestPathOrder = [];\r\n\r\n  while (stack.length) {\r\n    const currentNode = stack.shift();\r\n    if (currentNode.isWall || visitedNodesInOrder.includes(currentNode)) {\r\n      continue;\r\n    }\r\n\r\n    visitedNodesInOrder.push(currentNode);\r\n    if (\r\n      currentNode.row === finishNode.row &&\r\n      currentNode.col === finishNode.col\r\n    ) {\r\n      // Found finish\r\n      grid = resetGridProperties(grid);\r\n      nodesInShortestPathOrder.push(...getNodesInShortestPathOrder(finishNode));\r\n      return [nodesInShortestPathOrder, visitedNodesInOrder, grid];\r\n    }\r\n\r\n    // Add neighbors to the stack\r\n    const neighbors = getNeighbors(grid, currentNode);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      if (!visitedNodesInOrder.includes(neighbors[i])) {\r\n        neighbors[i].previousNode = currentNode;\r\n        stack.unshift(neighbors[i]);\r\n      }\r\n    }\r\n  }\r\n  grid = resetGridProperties(grid);\r\n\r\n  return [nodesInShortestPathOrder, visitedNodesInOrder, grid];\r\n};\r\n","import { getNodesInShortestPathOrder, resetGridProperties } from \"./dijkstra\";\r\nimport { getNeighbors, heuristic } from \"./aStar\";\r\n\r\n// Idea behind greedy is to pick according to some heuristic the closest node\r\n// To the finishNode (Currently using Manhattan distance heuristic)\r\n\r\nexport const greedy = (grid, startNode, finishNode) => {\r\n  const visitedNodesInOrder = [];\r\n  const nodesInShortestPathOrder = [];\r\n  const queue = [];\r\n  queue.push(startNode);\r\n\r\n  while (queue.length) {\r\n    // Choose node in the queue with lowest h value to be next node\r\n    let lowestIndex = 0;\r\n    for (let i = 0; i < queue.length; i++) {\r\n      if (queue[i].h < queue[lowestIndex].h) {\r\n        lowestIndex = i;\r\n      }\r\n    }\r\n\r\n    const currentNode = queue[lowestIndex];\r\n    queue.splice(lowestIndex, 1);\r\n\r\n    if (currentNode.isWall || visitedNodesInOrder.includes(currentNode))\r\n      continue;\r\n\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    if (\r\n      currentNode.row === finishNode.row &&\r\n      currentNode.col === finishNode.col\r\n    ) {\r\n      // Found finish\r\n      nodesInShortestPathOrder.push(...getNodesInShortestPathOrder(finishNode));\r\n      grid = resetGridProperties(grid);\r\n      return [nodesInShortestPathOrder, visitedNodesInOrder, grid];\r\n    }\r\n\r\n    // If did not find finish pick the neighbor closest to the finish according to a heuristic\r\n    const neighbors = getNeighbors(grid, currentNode);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      const neighbor = neighbors[i];\r\n      if (visitedNodesInOrder.includes(neighbor)) {\r\n        continue;\r\n      }\r\n      neighbor.h = heuristic(neighbor, finishNode);\r\n      neighbor.previousNode = currentNode;\r\n      queue.push(neighbor);\r\n    }\r\n  }\r\n  grid = resetGridProperties(grid);\r\n  return [nodesInShortestPathOrder, visitedNodesInOrder, grid];\r\n};\r\n","import React from \"react\";\r\nimport sprite from \"../../sprite.svg\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  updateFormattedTime1,\r\n  resetTimer1,\r\n  incrementSteps1\r\n} from \"../../redux/algorithm1/algorithm1.actions\";\r\nimport {\r\n  updateFormattedTime2,\r\n  incrementSteps2\r\n} from \"../../redux/algorithm2/algorithm2.actions\";\r\nimport { dijkstra } from \"../../algorithms/dijkstra\";\r\n\r\nimport { aStar } from \"../../algorithms/aStar\";\r\nimport { breadthFirstSearch } from \"../../algorithms/breadthFirstSearch\";\r\nimport { depthFirstSearch } from \"../../algorithms/depthFirstSearch\";\r\nimport { greedy } from \"../../algorithms/greedy\";\r\n\r\nimport { resetDistancesAndIsVisited } from \"../../redux/grid/grid.actions\";\r\nimport { resetGridClasses } from \"../../redux/grid/grid.util\";\r\nimport { isCompositeComponent } from \"react-dom/test-utils\";\r\n\r\nconst Step4 = ({\r\n  algorithm1,\r\n  algorithm2,\r\n  updateFormattedTime1,\r\n  updateFormattedTime2,\r\n  grid,\r\n  resetDistancesAndIsVisited,\r\n  incrementSteps1,\r\n  incrementSteps2\r\n}) => {\r\n  const stopwatch1 = algorithm1.stopwatch;\r\n  const stopwatch2 = algorithm2.stopwatch;\r\n\r\n  const animateAlgorithm = (\r\n    visitedNodesInOrder,\r\n    nodesInShortestPathOrder,\r\n    gridNum,\r\n    stopwatch\r\n  ) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder, gridNum, stopwatch);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(\r\n          `node-${node.row}-${node.col}-grid${gridNum}`\r\n        ).className += \" node-visited \";\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  const animateShortestPath = (\r\n    nodesInShortestPathOrder,\r\n    gridNum,\r\n    stopwatch\r\n  ) => {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (gridNum === 1) {\r\n          incrementSteps1();\r\n        } else if (gridNum === 2) {\r\n          incrementSteps2();\r\n        }\r\n        document.getElementById(\r\n          `node-${node.row}-${node.col}-grid${gridNum}`\r\n        ).className += \" node-shortest-path\";\r\n        if (i === nodesInShortestPathOrder.length - 1) {\r\n          stopwatch.isOn = false;\r\n        }\r\n      }, 50 * i);\r\n    }\r\n  };\r\n\r\n  const handleOnclick = () => {\r\n    if (!algorithm1.algorithm || !algorithm2.algorithm) {\r\n      alert(\"Please select two algorithms.\");\r\n      return;\r\n    }\r\n\r\n    if (stopwatch1.isOn || stopwatch2.isOn) {\r\n      // race in progress\r\n      return;\r\n    }\r\n\r\n    // Reset timers and classes, wins\r\n\r\n    resetGridClasses();\r\n    algorithm1.steps = 0;\r\n    algorithm2.steps = 0;\r\n\r\n    stopwatch1.reset();\r\n    stopwatch2.reset();\r\n\r\n    // STOPWATCH INITIALIZATION\r\n    stopwatch1.interval = setInterval(update.bind(stopwatch1), 10);\r\n    stopwatch1.offset = Date.now();\r\n    stopwatch1.isOn = true;\r\n\r\n    let nodesInShortestPathOrderGrid1, visitedNodesInOrderGrid1, newGrid1;\r\n    let nodesInShortestPathOrderGrid2, visitedNodesInOrderGrid2, newGrid2;\r\n\r\n    switch (algorithm1.algorithm) {\r\n      case \"Dijkstra's Algorithm\":\r\n        [\r\n          nodesInShortestPathOrderGrid1,\r\n          visitedNodesInOrderGrid1,\r\n          newGrid1\r\n        ] = dijkstra(\r\n          grid.grid,\r\n          grid.grid[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          grid.grid[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n\r\n      case \"A*\":\r\n        [\r\n          nodesInShortestPathOrderGrid1,\r\n          visitedNodesInOrderGrid1,\r\n          newGrid1\r\n        ] = aStar(\r\n          grid.grid,\r\n          grid.grid[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          grid.grid[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n\r\n      case \"Breadth-First-Search\":\r\n        [\r\n          nodesInShortestPathOrderGrid1,\r\n          visitedNodesInOrderGrid1,\r\n          newGrid1\r\n        ] = breadthFirstSearch(\r\n          grid.grid,\r\n          grid.grid[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          grid.grid[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n      case \"Depth-First-Search\":\r\n        [\r\n          nodesInShortestPathOrderGrid1,\r\n          visitedNodesInOrderGrid1,\r\n          newGrid1\r\n        ] = depthFirstSearch(\r\n          grid.grid,\r\n          grid.grid[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          grid.grid[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n      case \"Best-First-Search\":\r\n        [\r\n          nodesInShortestPathOrderGrid1,\r\n          visitedNodesInOrderGrid1,\r\n          newGrid1\r\n        ] = greedy(\r\n          grid.grid,\r\n          grid.grid[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          grid.grid[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    animateAlgorithm(\r\n      visitedNodesInOrderGrid1,\r\n      nodesInShortestPathOrderGrid1,\r\n      1,\r\n      stopwatch1\r\n    );\r\n\r\n    stopwatch2.interval = setInterval(update.bind(stopwatch2), 10);\r\n    stopwatch2.offset = Date.now();\r\n    stopwatch2.isOn = true;\r\n\r\n    // ALGORITHM 2\r\n\r\n    console.log(newGrid1);\r\n    switch (algorithm2.algorithm) {\r\n      case \"Dijkstra's Algorithm\":\r\n        [\r\n          nodesInShortestPathOrderGrid2,\r\n          visitedNodesInOrderGrid2,\r\n          newGrid2\r\n        ] = dijkstra(\r\n          newGrid1,\r\n          newGrid1[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          newGrid1[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n\r\n      case \"A*\":\r\n        [\r\n          nodesInShortestPathOrderGrid2,\r\n          visitedNodesInOrderGrid2,\r\n          newGrid2\r\n        ] = aStar(\r\n          newGrid1,\r\n          newGrid1[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          newGrid1[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n\r\n      case \"Breadth-First-Search\":\r\n        [\r\n          nodesInShortestPathOrderGrid2,\r\n          visitedNodesInOrderGrid2,\r\n          newGrid2\r\n        ] = breadthFirstSearch(\r\n          newGrid1,\r\n          newGrid1[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          newGrid1[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n      case \"Depth-First-Search\":\r\n        [\r\n          nodesInShortestPathOrderGrid2,\r\n          visitedNodesInOrderGrid2,\r\n          newGrid2\r\n        ] = depthFirstSearch(\r\n          newGrid1,\r\n          newGrid1[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          newGrid1[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n      case \"Best-First-Search\":\r\n        [\r\n          nodesInShortestPathOrderGrid2,\r\n          visitedNodesInOrderGrid2,\r\n          newGrid2\r\n        ] = greedy(\r\n          newGrid1,\r\n          newGrid1[grid.startNodeCoords[0]][grid.startNodeCoords[1]],\r\n          newGrid1[grid.finishNodeCoords[0]][grid.finishNodeCoords[1]]\r\n        );\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    animateAlgorithm(\r\n      visitedNodesInOrderGrid2,\r\n      nodesInShortestPathOrderGrid2,\r\n      2,\r\n      stopwatch2\r\n    );\r\n\r\n    resetDistancesAndIsVisited();\r\n  };\r\n\r\n  function update() {\r\n    if (stopwatch1.isOn) {\r\n      stopwatch1.time += stopwatch1.delta();\r\n      // Update redux state here\r\n      stopwatch1.formattedTime = stopwatch1.timeFormatter();\r\n      updateFormattedTime1(stopwatch1.formattedTime);\r\n    }\r\n\r\n    if (stopwatch2.isOn) {\r\n      stopwatch2.time += stopwatch2.delta();\r\n      stopwatch2.formattedTime = stopwatch2.timeFormatter();\r\n      updateFormattedTime2(stopwatch2.formattedTime);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"steps__step--4\">\r\n      <h3 className=\"heading-secondary\">STEP 4: Start the Race!</h3>\r\n      <svg className=\"logo--flag mt\">\r\n        <use href={sprite + \"#finish-flag\"}></use>\r\n      </svg>\r\n      <div onClick={handleOnclick} className=\"btn btn--start mt\">\r\n        Start\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  algorithm1: state.algorithm1,\r\n  algorithm2: state.algorithm2,\r\n  grid: state.grid\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateFormattedTime1: time => dispatch(updateFormattedTime1(time)),\r\n  updateFormattedTime2: time => dispatch(updateFormattedTime2(time)),\r\n  resetDistancesAndIsVisited: () => dispatch(resetDistancesAndIsVisited()),\r\n  resetTimer1: () => dispatch(resetTimer1()),\r\n  incrementSteps1: () => dispatch(incrementSteps1()),\r\n  incrementSteps2: () => dispatch(incrementSteps2())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Step4);\r\n","import React from \"react\";\r\n\r\nimport Step1 from \"./Step1\";\r\nimport Step2 from \"./Step2\";\r\nimport Step3 from \"./Step3\";\r\nimport Step4 from \"./Step4\";\r\n\r\nconst Steps = () => {\r\n  return (\r\n    <div className=\"steps\">\r\n      <Step1 />\r\n      <Step2 />\r\n      <Step3 />\r\n      <Step4 />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Steps;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport sprite from \"../../sprite.svg\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Stats1 = ({ algorithm1, algorithm2 }) => {\r\n  const [showTimeCup, setTimeCup] = useState(false);\r\n  const [showStepCup, setStepCup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !algorithm1.stopwatch.isOn &&\r\n      algorithm1.stopwatch.time > 0 &&\r\n      algorithm1.stopwatch.time <= algorithm2.stopwatch.time\r\n    ) {\r\n      setTimeCup(true);\r\n    } else {\r\n      setTimeCup(false);\r\n    }\r\n\r\n    if (\r\n      !algorithm1.stopwatch.isOn &&\r\n      algorithm1.steps > 0 &&\r\n      algorithm1.steps <= algorithm2.steps\r\n    ) {\r\n      setStepCup(true);\r\n    } else {\r\n      setStepCup(false);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"statistics__statistics--1\">\r\n      <div className=\"flex flex-33\">\r\n        <div className=\"flex\">\r\n          <svg className=\"logo--one mr\">\r\n            <use href={sprite + \"#one\"}></use>\r\n          </svg>\r\n          <h2 className=\"heading-statistic\">{algorithm1.algorithm}</h2>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <svg className={`mr logo--cup ${showTimeCup ? \"show\" : \"\"}`}>\r\n          <use href={sprite + \"#cup\"}></use>\r\n        </svg>\r\n\r\n        <svg className=\"mr logo--stopwatch\">\r\n          <use href={sprite + \"#stopwatch\"}></use>\r\n        </svg>\r\n        <h2 className=\"heading-statistic w-2\">\r\n          {algorithm1.stopwatch.formattedTime}\r\n        </h2>\r\n      </div>\r\n      <div className=\"flex\">\r\n        <svg className={`mr logo--cup ${showStepCup ? \"show\" : \"\"}`}>\r\n          <use href={sprite + \"#cup\"}></use>\r\n        </svg>\r\n        <svg className=\"logo--footstep mr\">\r\n          <use href={sprite + \"#footstep\"}></use>\r\n        </svg>\r\n        <h2 className=\"heading-statistic w-2\">{algorithm1.steps}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  algorithm1: state.algorithm1,\r\n  algorithm2: state.algorithm2\r\n});\r\n\r\nexport default connect(mapStateToProps)(Stats1);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport sprite from \"../../sprite.svg\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Stats2 = ({ algorithm1, algorithm2 }) => {\r\n  const [showTimeCup, setTimeCup] = useState(false);\r\n  const [showStepCup, setStepCup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !algorithm2.stopwatch.isOn &&\r\n      algorithm2.stopwatch.time > 0 &&\r\n      algorithm2.stopwatch.time <= algorithm1.stopwatch.time\r\n    ) {\r\n      setTimeCup(true);\r\n    } else {\r\n      setTimeCup(false);\r\n    }\r\n\r\n    if (\r\n      !algorithm2.stopwatch.isOn &&\r\n      algorithm2.steps > 0 &&\r\n      algorithm2.steps <= algorithm1.steps\r\n    ) {\r\n      setStepCup(true);\r\n    } else {\r\n      setStepCup(false);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"statistics__statistics--2\">\r\n      <div className=\"flex flex-33\">\r\n        <div className=\"flex\">\r\n          <svg className=\"logo--two mr\">\r\n            <use href={sprite + \"#two\"}></use>\r\n          </svg>\r\n          <h2 className=\"heading-statistic\">{algorithm2.algorithm}</h2>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <svg className={`mr logo--cup ${showTimeCup ? \"show\" : \"\"}`}>\r\n          <use href={sprite + \"#cup\"}></use>\r\n        </svg>\r\n\r\n        <svg className=\"mr logo--stopwatch\">\r\n          <use href={sprite + \"#stopwatch\"}></use>\r\n        </svg>\r\n        <h2 className=\"heading-statistic w-2\">\r\n          {algorithm2.stopwatch.formattedTime}\r\n        </h2>\r\n      </div>\r\n      <div className=\"flex\">\r\n        <svg className={`mr logo--cup ${showStepCup ? \"show\" : \"\"}`}>\r\n          <use href={sprite + \"#cup\"}></use>\r\n        </svg>\r\n\r\n        <svg className=\"logo--footstep mr\">\r\n          <use href={sprite + \"#footstep\"}></use>\r\n        </svg>\r\n        <h2 className=\"heading-statistic w-2\">{algorithm2.steps}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  algorithm2: state.algorithm2,\r\n  algorithm1: state.algorithm1\r\n});\r\n\r\nexport default connect(mapStateToProps)(Stats2);\r\n","import React from \"react\";\r\n\r\nimport Stats1 from \"./Stats1\";\r\nimport Stats2 from \"./Stats2\";\r\n\r\nconst Stats = () => {\r\n  return (\r\n    <div className=\"statistics\">\r\n      <Stats1 />\r\n      <Stats2 />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport sprite from \"../../sprite.svg\";\r\n\r\nimport {\r\n  settingStartNode,\r\n  doneSettingStartNode,\r\n  setStartNode,\r\n  settingFinishNode,\r\n  doneSettingFinishNode,\r\n  setFinishNode,\r\n  addWall,\r\n  settingWalls,\r\n  doneSettingWalls\r\n} from \"../../redux/grid/grid.actions\";\r\n\r\nconst Node = ({\r\n  id,\r\n  grid,\r\n  currentNode,\r\n  settingStartNode,\r\n  setStartNode,\r\n  settingFinishNode,\r\n  setFinishNode,\r\n  settingWalls,\r\n  addWall\r\n}) => {\r\n  const startNodeCoords = grid.startNodeCoords;\r\n  const finishNodeCoords = grid.finishNodeCoords;\r\n\r\n  let isStartNode = false;\r\n  let isFinishNode = false;\r\n  const [renderStartIcon, setRenderStartIcon] = useState(false);\r\n  const [renderFinishIcon, setRenderFinishIcon] = useState(false);\r\n\r\n  if (\r\n    currentNode.row === startNodeCoords[0] &&\r\n    currentNode.col === startNodeCoords[1]\r\n  ) {\r\n    isStartNode = true;\r\n  }\r\n\r\n  if (\r\n    currentNode.row === finishNodeCoords[0] &&\r\n    currentNode.col === finishNodeCoords[1]\r\n  ) {\r\n    isFinishNode = true;\r\n  }\r\n\r\n  const handleOnMouseDown = e => {\r\n    e.preventDefault();\r\n    if (isStartNode) {\r\n      settingStartNode();\r\n      setRenderStartIcon(true);\r\n    } else if (isFinishNode) {\r\n      settingFinishNode();\r\n      setRenderFinishIcon(true);\r\n    } else {\r\n      // Change state to make editing walls true\r\n      addWall(currentNode.row, currentNode.col);\r\n      settingWalls();\r\n    }\r\n  };\r\n\r\n  const handleOnMouseUp = () => {\r\n    if (grid.isSettingStartNode && !isFinishNode && !currentNode.isWall) {\r\n      // This is when the user is dragging the start flag, need to update start_coords state\r\n      setStartNode(currentNode.row, currentNode.col);\r\n    } else if (\r\n      grid.isSettingFinishNode &&\r\n      !isStartNode &&\r\n      !currentNode.isWall\r\n    ) {\r\n      setFinishNode(currentNode.row, currentNode.col);\r\n    }\r\n    // doneSettingStartNode();\r\n    // doneSettingFinishNode();\r\n    // doneSettingWalls();\r\n  };\r\n\r\n  const handleOnMouseEnter = () => {\r\n    if (grid.isSettingStartNode && !isFinishNode) {\r\n      setRenderStartIcon(true);\r\n    } else if (grid.isSettingFinishNode && !isStartNode) {\r\n      setRenderFinishIcon(true);\r\n    } else if (grid.isSettingWalls && !isStartNode && !isFinishNode) {\r\n      addWall(currentNode.row, currentNode.col);\r\n    }\r\n  };\r\n\r\n  const handleOnMouseLeave = () => {\r\n    setRenderStartIcon(false);\r\n    setRenderFinishIcon(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id={id}\r\n      onMouseUp={handleOnMouseUp}\r\n      onMouseDown={handleOnMouseDown}\r\n      onMouseEnter={handleOnMouseEnter}\r\n      onMouseLeave={handleOnMouseLeave}\r\n      className={`node ${\r\n        grid.grid[currentNode.row][currentNode.col].isWall ? \"node--wall\" : \"\"\r\n      }`}\r\n    >\r\n      {((isStartNode && !grid.isSettingStartNode) ||\r\n        (renderStartIcon && grid.isSettingStartNode)) && (\r\n        <svg className=\"logo--start-node pointer\">\r\n          <use href={sprite + \"#start\"}></use>\r\n        </svg>\r\n      )}\r\n\r\n      {((isFinishNode && !grid.isSettingFinishNode) ||\r\n        (renderFinishIcon && grid.isSettingFinishNode)) && (\r\n        <svg className=\"logo--start-node pointer\">\r\n          <use href={sprite + \"#finish-line\"}></use>\r\n        </svg>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  settingStartNode: () => dispatch(settingStartNode()),\r\n  doneSettingStartNode: () => dispatch(doneSettingStartNode()),\r\n  setStartNode: (row, col) => dispatch(setStartNode(row, col)),\r\n  settingFinishNode: () => dispatch(settingFinishNode()),\r\n  doneSettingFinishNode: () => dispatch(doneSettingFinishNode()),\r\n  setFinishNode: (row, col) => dispatch(setFinishNode(row, col)),\r\n  settingWalls: () => dispatch(settingWalls()),\r\n  doneSettingWalls: () => dispatch(doneSettingWalls()),\r\n  addWall: (row, col) => dispatch(addWall(row, col))\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  grid: state.grid\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);\r\n","import React from \"react\";\r\n\r\nimport Node from \"./Node\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Grid1 = ({ grid }) => {\r\n  // const gridContent = [];\r\n\r\n  // for (let i = 0; i < 15; i++) {\r\n  //   const row = [];\r\n  //   for (let j = 0; j < 20; j++) {\r\n  //     row.push(<Node row={i} col={j} key={[i, j]} />);\r\n  //   }\r\n  //   gridContent.push(row);\r\n  // }\r\n\r\n  const gridContent = grid.grid.map((row, rowIndex) =>\r\n    row.map((col, colIndex) => (\r\n      <Node\r\n        id={`node-${rowIndex}-${colIndex}-grid1`}\r\n        currentNode={grid.grid[rowIndex][colIndex]}\r\n        key={[rowIndex, colIndex]}\r\n      />\r\n    ))\r\n  );\r\n\r\n  return <div className=\"grids__grid--1\">{gridContent}</div>;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  grid: state.grid\r\n});\r\n\r\nexport default connect(mapStateToProps)(Grid1);\r\n","import React from \"react\";\r\nimport Node from \"./Node\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Grid2 = ({ grid }) => {\r\n  // const gridContent = [];\r\n\r\n  // for (let i = 0; i < 15; i++) {\r\n  //   const row = [];\r\n  //   for (let j = 0; j < 20; j++) {\r\n  //     row.push(<Node row={i} col={j} key={[i, j]} />);\r\n  //   }\r\n  //   gridContent.push(row);\r\n  // }\r\n  const gridContent = grid.grid.map((row, rowIndex) =>\r\n    row.map((col, colIndex) => (\r\n      <Node\r\n        id={`node-${rowIndex}-${colIndex}-grid2`}\r\n        currentNode={grid.grid[rowIndex][colIndex]}\r\n        key={[rowIndex, colIndex]}\r\n      />\r\n    ))\r\n  );\r\n\r\n  return <div className=\"grids__grid--2\">{gridContent}</div>;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  grid: state.grid\r\n});\r\n\r\nexport default connect(mapStateToProps)(Grid2);\r\n","import React from \"react\";\r\nimport Grid1 from \"./Grid1\";\r\nimport Grid2 from \"./Grid2\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  doneSettingStartNode,\r\n  doneSettingFinishNode,\r\n  doneSettingWalls\r\n} from \"../../redux/grid/grid.actions\";\r\n\r\nconst Grids = ({\r\n  doneSettingStartNode,\r\n  doneSettingFinishNode,\r\n  doneSettingWalls\r\n}) => {\r\n  const handleOnMouseUp = () => {\r\n    doneSettingStartNode();\r\n    doneSettingFinishNode();\r\n    doneSettingWalls();\r\n  };\r\n  return (\r\n    <div onMouseUp={handleOnMouseUp} className=\"grids\">\r\n      <Grid1 />\r\n      <Grid2 />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  doneSettingStartNode: () => dispatch(doneSettingStartNode()),\r\n  doneSettingFinishNode: () => dispatch(doneSettingFinishNode()),\r\n  doneSettingWalls: () => dispatch(doneSettingWalls())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Grids);\r\n","import React, { Fragment } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Steps from \"./Steps/Steps\";\r\nimport Stats from \"./Stats/Stats\";\r\nimport Grids from \"./Grids/Grids\";\r\n\r\nconst PathfindingVisualizer = () => {\r\n  return (\r\n    <Fragment>\r\n      <Header />\r\n      <Steps />\r\n      <Stats />\r\n      <Grids />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n","import React from \"react\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"./style.css\";\n\nfunction App() {\n  return <PathfindingVisualizer></PathfindingVisualizer>;\n}\n\nexport default App;\n","import GridActionTypes from \"./grid.types\";\r\n\r\nimport {\r\n  addWall,\r\n  createEmptyGrid,\r\n  resetDistancesAndIsVisited\r\n} from \"./grid.util\";\r\n\r\nconst INITIAL_STATE = {\r\n  grid: createEmptyGrid(),\r\n  startNodeCoords: [0, 0],\r\n  finishNodeCoords: [2, 14],\r\n  isSettingStartNode: false,\r\n  isSettingFinishNode: false,\r\n  isSettingWalls: false\r\n};\r\n\r\nconst GridReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case GridActionTypes.RESET_GRID:\r\n      return { ...state, grid: createEmptyGrid() };\r\n    case GridActionTypes.RESET_DISTANCES_AND_ISVISITED:\r\n      return { ...state, grid: resetDistancesAndIsVisited(state.grid) };\r\n\r\n    case GridActionTypes.SETTING_START_NODE:\r\n      return { ...state, isSettingStartNode: true };\r\n    case GridActionTypes.DONE_SETTING_START_NODE:\r\n      return { ...state, isSettingStartNode: false };\r\n    case GridActionTypes.SET_START_NODE:\r\n      return { ...state, startNodeCoords: action.payload };\r\n\r\n    case GridActionTypes.SETTING_FINISH_NODE:\r\n      return { ...state, isSettingFinishNode: true };\r\n    case GridActionTypes.DONE_SETTING_FINISH_NODE:\r\n      return { ...state, isSettingFinishNode: false };\r\n    case GridActionTypes.SET_FINISH_NODE:\r\n      return { ...state, finishNodeCoords: action.payload };\r\n\r\n    case GridActionTypes.SETTING_WALLS:\r\n      return { ...state, isSettingWalls: true };\r\n    case GridActionTypes.DONE_SETTING_WALLS:\r\n      return { ...state, isSettingWalls: false };\r\n    case GridActionTypes.ADD_WALL:\r\n      return {\r\n        ...state,\r\n        grid: addWall(state.grid, action.payload[0], action.payload[1])\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default GridReducer;\r\n","class Stopwatch {\r\n  constructor() {\r\n    this.time = 0;\r\n    this.interval = 0;\r\n    this.offset = 0;\r\n    this.isOn = false;\r\n    this.formattedTime = \"00:000\";\r\n  }\r\n\r\n  start() {\r\n    this.interval = setInterval(this.update.bind(this), 10);\r\n    this.offset = Date.now();\r\n    this.isOn = true;\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this.interval);\r\n    this.interval = null;\r\n    this.isOn = false;\r\n  }\r\n\r\n  reset() {\r\n    this.time = 0;\r\n    this.interval = 0;\r\n    this.offset = 0;\r\n    this.isOn = false;\r\n    this.formattedTime = \"00:000\";\r\n  }\r\n\r\n  delta() {\r\n    const now = Date.now();\r\n    const timePassed = now - this.offset;\r\n    this.offset = now;\r\n    return timePassed;\r\n  }\r\n\r\n  update() {\r\n    if (this.isOn) {\r\n      this.time += this.delta();\r\n    }\r\n\r\n    this.formattedTime = this.timeFormatter();\r\n  }\r\n\r\n  timeFormatter() {\r\n    const time = new Date(this.time);\r\n    let seconds = time.getSeconds().toString();\r\n    let milliseconds = time.getMilliseconds().toString();\r\n\r\n    if (seconds.length < 2) {\r\n      seconds = \"0\" + seconds;\r\n    }\r\n\r\n    while (milliseconds.length < 3) {\r\n      milliseconds = \"0\" + milliseconds;\r\n    }\r\n\r\n    return seconds + \":\" + milliseconds;\r\n  }\r\n}\r\n\r\nexport default Stopwatch;\r\n","import Algorithm1ActionTypes from \"./algorithm1.types\";\r\nimport Stopwatch from \"../../components/stopwatch\";\r\n\r\nconst INITIAL_STATE = {\r\n  algorithm: \"\",\r\n  stopwatch: new Stopwatch(),\r\n  steps: 0,\r\n  winTime: false,\r\n  winSteps: false,\r\n  dropdown: false,\r\n  formattedTime: \"00:000\"\r\n};\r\nconst algorithm1Reducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case Algorithm1ActionTypes.SET_ALGORITHM1:\r\n      return {\r\n        ...state,\r\n        algorithm: action.payload\r\n      };\r\n\r\n    case Algorithm1ActionTypes.TOGGLE_DROPDOWN1:\r\n      return {\r\n        ...state,\r\n        dropdown: !state.dropdown\r\n      };\r\n\r\n    case Algorithm1ActionTypes.UPDATE_FORMATTED_TIME1:\r\n      return {\r\n        ...state,\r\n        formattedTime: action.payload\r\n      };\r\n\r\n    case Algorithm1ActionTypes.RESET_TIMER1:\r\n      return { ...state, stopwatch: new Stopwatch() };\r\n\r\n    case Algorithm1ActionTypes.INCREMENT_STEPS1:\r\n      return { ...state, steps: state.steps + 1 };\r\n\r\n    case Algorithm1ActionTypes.RESET_STEPS1:\r\n      return { ...state, steps: 0 };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default algorithm1Reducer;\r\n","import Algorithm2ActionTypes from \"./algorithm2.types\";\r\nimport Stopwatch from \"../../components/stopwatch\";\r\n\r\nconst INITIAL_STATE = {\r\n  algorithm: \"\",\r\n  stopwatch: new Stopwatch(),\r\n  steps: 0,\r\n  winTime: false,\r\n  winSteps: false,\r\n  dropdown: false,\r\n  formattedTime: \"00:000\"\r\n};\r\nconst algorithm2Reducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case Algorithm2ActionTypes.SET_ALGORITHM2:\r\n      return {\r\n        ...state,\r\n        algorithm: action.payload\r\n      };\r\n\r\n    case Algorithm2ActionTypes.TOGGLE_DROPDOWN2:\r\n      return {\r\n        ...state,\r\n        dropdown: !state.dropdown\r\n      };\r\n\r\n    case Algorithm2ActionTypes.UPDATE_FORMATTED_TIME2:\r\n      return {\r\n        ...state,\r\n        formattedTime: action.payload\r\n      };\r\n\r\n    case Algorithm2ActionTypes.RESET_TIMER2:\r\n      return { ...state, stopwatch: new Stopwatch() };\r\n\r\n    case Algorithm2ActionTypes.INCREMENT_STEPS2:\r\n      return { ...state, steps: state.steps + 1 };\r\n\r\n    case Algorithm2ActionTypes.RESET_STEPS2:\r\n      return { ...state, steps: 0 };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default algorithm2Reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport gridReducer from \"./grid/grid.reducer\";\r\nimport algorithm1Reducer from \"./algorithm1/algorithm1.reducer\";\r\nimport algorithm2Reducer from \"./algorithm2/algorithm2.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  grid: gridReducer,\r\n  algorithm1: algorithm1Reducer,\r\n  algorithm2: algorithm2Reducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst middlewares = [];\r\n\r\n// if (process.env.NODE_ENV === \"development\") {\r\n//   middlewares.push(logger);\r\n// }\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}